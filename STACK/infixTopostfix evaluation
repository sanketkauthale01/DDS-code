#include <iostream>
#include <cstring>
using namespace std;
#define size 100
char stack[size];
int top=-1;

int isempty(){
    if(top==-1){
        return 1;
    }
    return 0;
}

int isfull(){
    if(top==size-1){
        return 1;
    }
    return 0;
}

void push(char val){
    if(isfull()){
        cout<<"stack is overflow"<<endl;
    }
    else {
        top++;
        stack[top]=val;
    }
}

char pop() {
    if (isempty()) {
        cout << "Stack Underflow! Cannot pop from the stack\n";
        return -1;
    } else {
        char val = stack[top];
        top--;
        return val;
    }
}

char stacktop(){
    return stack[top];
}

int precedence(char c){
    if(c=='*'||c=='/'){
        return 3;
    }
    else if(c=='+'||c=='-'){
        return 2;
    }
    return 0;
}

int isoperator(char c){
    if(c=='+'||c=='-'||c=='*'||c=='/'){
        return 1;
    }
    else{
        return 0;
    }
}

char * infixTopostfix(char* infix){
    static char postfix[size];
    int i=0;
    int j=0;
    while(infix[i]!='\0'){
        if (!isoperator(infix[i])){
            postfix[j]=infix[i];
            i++;
            j++;
        }
        else {
            if (isempty() || precedence(infix[i]) > precedence(stacktop())) {
                push(infix[i]);
                i++;
            }
            else {
                postfix[j]=pop();
                j++;
            }
            
        }
    }
    while (!isempty()){
    postfix[i]=pop();
    j++;
    
}
  postfix[j]='\0';
return postfix;
}



int main() {
      
     char infix[]="x-y/z-k*d";
    cout<<"postfix is"<<infixTopostfix(infix);

    return 0;
}
